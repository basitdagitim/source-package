#!/bin/bash


rootfs="$HOME/distro/initrd"
rm -rf $HOME/distro/iso
rm -rf $rootfs
bash ./initrdnew
mkdir -p $HOME/distro
mkdir -p $rootfs
./bpsupdate
./bpskur glibc $rootfs
./bpskur readline $rootfs/
./bpskur ncurses $rootfs/
./bpskur \bash $rootfs/
./bpskur busybox $rootfs/
./bpskur kmod $rootfs/
./bpskur eudev $rootfs/
./bpskur util-linux $rootfs/
./bpskur base-file $rootfs/
./bpskur grub $rootfs/
./bpskur e2fsprogs $rootfs/
./bpskur xz $rootfs/

./bpskur curl $rootfs/
./bpskur openssl $rootfs/

#****************modul yukleme*************************
#cd $HOME/distro/linux-6.6.2
#make bzImage modules
#INSTALL_MOD_PATH="$HOME/distro/initrd" make modules_install
#/sbin/depmod --all --basedir=initrd #modul indeksi oluşturluyor
mkdir -p $rootfs/lib/modules/
mkdir -p $rootfs/lib/modules/$(uname -r)
mkdir -p $rootfs/lib/modules/$(uname -r)/moduller
#moduller {cdrom,loop,md,ahci,block,ata,firewire,sd,scsi,message,pcmcia,virtio,host}
#moduller {storage,crypto,fs,lib,dm-snapshot,overlay,isofs,squashfs,hfsplus,sr_mod,dm_mod}
#moduller {nls,nls_utf8,overlayfs,udf,ext4,usb-storage}

#for directory in {lib,fs,crypto,net} \
#   drivers/{usb,block,ata,md,firewire} \
#    drivers/{scsi,message,pcmcia,virtio} ;
#   	do
    	#echo ${directory}
    	#    misc \
#  find /lib/modules/$(uname -r)/kernel/${directory}/ -type f \
#      -exec install {} $HOME/distro/initrd/lib/modules/$(uname -r)/moduller/ \;
#	done
cp /lib/modules/$(uname -r)/kernel/* -rf $rootfs/lib/modules/$(uname -r)/moduller/ #sistemden kopyalandı..

/sbin/depmod --all --basedir=$rootfs #modul indeksi oluşturluyor
#*****************kurallar yüklenecek*************************
##mkdir -p $HOME/distro/initrd/etc/udev/
##mkdir -p $HOME/distro/initrd/lib/udev/
##cp /etc/udev/rules.d -rf  $HOME/distro/initrd/etc/udev/
##cp /lib/udev/rules.d -rf  $HOME/distro/initrd/lib/udev/
#rm -rf $HOME/distro/initrd/lib/udev/rules.d/80-drivers.rules
#rm -rf $HOME/distro/initrd/lib/udev/rules.d/80-debian-compat.rules
#rm -rf $HOME/distro/initrd/lib/udev/rules.d/80-net-setup-link.rules
#rm -rf $HOME/distro/initrd/lib/udev/rules.d/90-nm-thunderbolt.rules
#rm -rf $HOME/distro/initrd/lib/udev/rules.d/73-seat-late.rules

#**************************init dosyası oluşturuluyor***********************************

cat >  $rootfs/init << EOF
#!/bin/busybox ash
/bin/busybox mkdir -p /bin
/bin/busybox --install -s /bin
#**********************************
export PATH=/sbin:/bin:/usr/bin:/usr/sbin:

[ -d /dev ]  || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ]  || mkdir /sys
[ -d /proc ] || mkdir /proc
mkdir -p /tmp /run
touch /dev/null

# devtmpfs does not get automounted for initramfs
mount -t devtmpfs devtmpfs /dev
mount -t proc proc /proc
mount -t sysfs sysfs /sys
mount -t tmpfs tmpfs /tmp
#******************************************************************************
for x in $(cat /proc/cmdline); do
	case $x in
	init=*)
		init=${x#init=}
		echo " bu bir test :${x#init=}"
		${x#init=}
		;;
	esac
done

echo "disk başlatıldı"

/bin/busybox ash
#/bin/bash

EOF



chmod +x $rootfs/init 
cd $rootfs
find |cpio -H newc -o >../initrd.img



#************************iso *********************************
mkdir -p $HOME/distro/iso
mkdir -p $HOME/distro/iso/boot
mkdir -p $HOME/distro/iso/boot/grub
mkdir -p $HOME/distro/iso/live || true


#squashfs dosyası oluşturuluyor iso dzinine kopyalanıyor
#cp -prfv $HOME/distro/iso/boot /$HOME/distro/initrd/
cd $HOME/distro/
mksquashfs $rootfs $HOME/distro/filesystem.squashfs -comp xz -wildcards
mv $HOME/distro/filesystem.squashfs $HOME/distro/iso/live/filesystem.squashfs

#iso dizinine vmlinuz ve initrd.img dosyamız kopyalanıyor
#cp /boot/vmlinuz-$(uname -r) $HOME/distro/iso/boot/vmlinuz  #sistemde kullandığım kerneli kopyaladım istenirde kernel derlenebilir.
#mv $HOME/distro/initrd.img $HOME/distro/iso/boot/initrd.img #oluşturduğumuz **initrd.img** dosyamızı taşıyoruz.


#grub menüsü oluşturuluyor..
#cat > $HOME/distro/iso/boot/grub/grub.cfg << EOF
#linux /boot/vmlinuz net.ifnames=0 biosdevname=0
#initrd /boot/initrd.img
#boot boot=live
#EOF




#echo 'menuentry "Live GNU/Linux 64-bit" --class live {' > $HOME/distro/iso/boot/grub/grub.cfg
#echo '    linux /boot/vmlinuz boot=live quiet live-config --' >> liveiso/boot/grub/grub.cfg
#echo '    initrd /boot/initrd.img' >> $HOME/distro/iso/boot/grub/grub.cfg
#echo '}' >> $HOME/distro/iso/boot/grub/grub.cfg

grub-mkrescue $HOME/distro/iso/ -o $HOME/distro/distro.iso
#qemu-system-x86_64 -cdrom $HOME/distro/distro.iso -m 1G





